use std::hash::BuildHasherDefault;

use crate::tagged::Tagged;

use super::JsString;
use paste::paste;
use rustc_hash::{FxHashMap, FxHasher};

macro_rules! well_known_statics {
    ( $( $(#[$attr:meta])* ($name:ident, $string:literal) ),+$(,)? ) => {
        $(
            paste!{
                // TODO: doc
                // #[doc = "Gets the static `JsString` for `\"" $string "\"`."]
                #[doc = "Gets the static `JsString`."]
                #[allow(unused)]
                pub(crate) const $name: JsString = JsString {
                    ptr: Tagged::from_tag(
                        Self::find_index($string),
                    ),
                };
            }
        )+
    };
}

/// List of commonly used strings in Javascript code.
///
/// Any strings defined here are used as a static [`JsString`] instead of allocating on the heap.
#[derive(Debug)]
pub(crate) struct StaticJsStrings;

impl StaticJsStrings {
    // useful to search at compile time a certain string in the array
    const fn find_index(candidate: &str) -> usize {
        const fn const_eq(lhs: &str, rhs: &str) -> bool {
            if lhs.len() != rhs.len() {
                return false;
            }

            let mut i = 0;
            while i < lhs.len() {
                if lhs.as_bytes()[i] != rhs.as_bytes()[i] {
                    return false;
                }
                i += 1;
            }
            true
        }
        let mut i = 0;
        while i < RAW_STATICS.len() {
            let s = RAW_STATICS[i];
            // assert!(s.is_ascii());
            if const_eq(s, candidate) {
                return i;
            }
            i += 1;
        }
        panic!("couldn't find the required string on the common string array");
    }

    /// Gets the `JsString` corresponding to `string`, or `None` if the string
    /// doesn't exist inside the static array.
    pub(crate) fn get_string(string: &str) -> Option<JsString> {
        if string.len() > MAX_STATIC_LENGTH {
            return None;
        }

        let index = RAW_STATICS_CACHE.with(|map| map.get(string).copied())?;

        Some(JsString {
            ptr: Tagged::from_tag(index),
        })
    }

    /// Gets the `&[u16]` slice corresponding to the provided index, or `None` if the index
    /// provided exceeds the size of the static array.
    pub(crate) fn get(index: usize) -> Option<&'static str> {
        RAW_STATICS.get(index).copied()
    }

    // Some consts are only used on certain features, which triggers the unused lint.
    well_known_statics! {
        (EMPTY_STRING, ""),
        // Symbols
        (SYMBOL_ASYNC_ITERATOR, "Symbol.asyncIterator"),
        (SYMBOL_HAS_INSTANCE, "Symbol.hasInstance"),
        (SYMBOL_IS_CONCAT_SPREADABLE, "Symbol.isConcatSpreadable"),
        (SYMBOL_ITERATOR, "Symbol.iterator"),
        (SYMBOL_MATCH, "Symbol.match"),
        (SYMBOL_MATCH_ALL, "Symbol.matchAll"),
        (SYMBOL_REPLACE, "Symbol.replace"),
        (SYMBOL_SEARCH, "Symbol.search"),
        (SYMBOL_SPECIES, "Symbol.species"),
        (SYMBOL_SPLIT, "Symbol.split"),
        (SYMBOL_TO_PRIMITIVE, "Symbol.toPrimitive"),
        (SYMBOL_TO_STRING_TAG, "Symbol.toStringTag"),
        (SYMBOL_UNSCOPABLES, "Symbol.unscopables"),
        (FN_SYMBOL_ASYNC_ITERATOR, "[Symbol.asyncIterator]"),
        (FN_SYMBOL_HAS_INSTANCE, "[Symbol.hasInstance]"),
        (FN_SYMBOL_IS_CONCAT_SPREADABLE, "[Symbol.isConcatSpreadable]"),
        (FN_SYMBOL_ITERATOR, "[Symbol.iterator]"),
        (FN_SYMBOL_MATCH, "[Symbol.match]"),
        (FN_SYMBOL_MATCH_ALL, "[Symbol.matchAll]"),
        (FN_SYMBOL_REPLACE, "[Symbol.replace]"),
        (FN_SYMBOL_SEARCH, "[Symbol.search]"),
        (FN_SYMBOL_SPECIES, "[Symbol.species]"),
        (FN_SYMBOL_SPLIT, "[Symbol.split]"),
        (FN_SYMBOL_TO_PRIMITIVE, "[Symbol.toPrimitive]"),
        (FN_SYMBOL_TO_STRING_TAG, "[Symbol.toStringTag]"),
        (FN_SYMBOL_UNSCOPABLES, "[Symbol.unscopables]"),
        // Builtins
        (ARRAY, "Array"),
        (ARRAY_BUFFER, "ArrayBuffer"),
        (SHARED_ARRAY_BUFFER, "SharedArrayBuffer"),
        (ASYNC_FUNCTION, "AsyncFunction"),
        (ASYNC_GENERATOR, "AsyncGenerator"),
        (ASYNC_GENERATOR_FUNCTION, "AsyncGeneratorFunction"),
        (ATOMICS, "Atomics"),
        (BIG_INT, "BigInt"),
        (BOOLEAN, "Boolean"),
        (DATA_VIEW, "DataView"),
        (DATE, "Date"),
        (ERROR, "Error"),
        (AGGREGATE_ERROR, "AggregateError"),
        (EVAL_ERROR, "EvalError"),
        (RANGE_ERROR, "RangeError"),
        (REFERENCE_ERROR, "ReferenceError"),
        (SYNTAX_ERROR, "SyntaxError"),
        (TYPE_ERROR, "TypeError"),
        (URI_ERROR, "URIError"),
        (ESCAPE, "escape"),
        (UNESCAPE, "unescape"),
        (EVAL, "eval"),
        (FUNCTION, "Function"),
        (GENERATOR, "Generator"),
        (GENERATOR_FUNCTION, "GeneratorFunction"),
        (INTL, "Intl"),
        (COLLATOR, "Collator"),
        (LIST_FORMAT, "ListFormat"),
        (LOCALE, "Locale"),
        (PLURAL_RULES, "PluralRules"),
        (SEGMENTER, "Segmenter"),
        (DATE_TIME_FORMAT, "DateTimeFormat"),
        (JSON, "JSON"),
        (MAP, "Map"),
        (MATH, "Math"),
        (NUMBER, "Number"),
        (IS_FINITE, "isFinite"),
        (IS_NAN, "isNaN"),
        (PARSE_INT, "parseInt"),
        (PARSE_FLOAT, "parseFloat"),
        (OBJECT, "Object"),
        (PROMISE, "Promise"),
        (PROXY, "Proxy"),
        (REFLECT, "Reflect"),
        (REG_EXP, "RegExp"),
        (SET, "Set"),
        (STRING, "String"),
        (SYMBOL, "Symbol"),
        (TYPED_ARRAY, "TypedArray"),
        (INT8_ARRAY, "Int8Array"),
        (UINT8_ARRAY, "Uint8Array"),
        (UINT8_CLAMPED_ARRAY, "Uint8ClampedArray"),
        (INT16_ARRAY, "Int16Array"),
        (UINT16_ARRAY, "Uint16Array"),
        (INT32_ARRAY, "Int32Array"),
        (UINT32_ARRAY, "Uint32Array"),
        (BIG_INT64_ARRAY, "BigInt64Array"),
        (BIG_UINT64_ARRAY, "BigUint64Array"),
        (FLOAT32_ARRAY, "Float32Array"),
        (FLOAT64_ARRAY, "Float64Array"),
        (ENCODE_URI, "encodeURI"),
        (ENCODE_URI_COMPONENT, "encodeURIComponent"),
        (DECODE_URI, "decodeURI"),
        (DECODE_URI_COMPONENT, "decodeURIComponent"),
        (WEAK_REF, "WeakRef"),
        (WEAK_MAP, "WeakMap"),
        (WEAK_SET, "WeakSet"),
        (TEMPORAL, "Temporal"),
        (NOW, "Temporal.Now"),
        (INSTANT, "Temporal.Instant"),
        (DURATION, "Temporal.Duration"),
        (PLAIN_DATE, "Temporal.PlainDate"),
        (PLAIN_DATETIME, "Temporal.PlainDateTime"),
        (PLAIN_TIME, "Temporal.PlainTime"),
        (PLAIN_YM, "Temporal.PlainYearMonth"),
        (PLAIN_MD, "Temporal.PlainMonthDay"),
        (CALENDAR, "Temporal.Calendar"),
        (TIMEZONE, "Temporal.TimeZone"),
        (ZONED_DT, "Temporal.ZonedDateTime"),
    }
}

static MAX_STATIC_LENGTH: usize = {
    let mut max = 0;
    let mut i = 0;
    while i < RAW_STATICS.len() {
        let len = RAW_STATICS[i].len();
        if len > max {
            max = len;
        }
        i += 1;
    }
    max
};

thread_local! {
    /// Map from a string inside [`RAW_STATICS`] to its corresponding static index on `RAW_STATICS`.
    static RAW_STATICS_CACHE: FxHashMap<&'static str, usize> = {
        let mut constants = FxHashMap::with_capacity_and_hasher(
            RAW_STATICS.len(),
            BuildHasherDefault::<FxHasher>::default(),
        );

        for (idx, &s) in RAW_STATICS.iter().enumerate() {
            constants.insert(s, idx);
        }

        constants
    };
}

/// Array of raw static strings that aren't reference counted.
const RAW_STATICS: &[&str] = &[
    "",
    // Well known symbols
    "Symbol.asyncIterator",
    "[Symbol.asyncIterator]",
    "Symbol.hasInstance",
    "[Symbol.hasInstance]",
    "Symbol.isConcatSpreadable",
    "[Symbol.isConcatSpreadable]",
    "Symbol.iterator",
    "[Symbol.iterator]",
    "Symbol.match",
    "[Symbol.match]",
    "Symbol.matchAll",
    "[Symbol.matchAll]",
    "Symbol.replace",
    "[Symbol.replace]",
    "Symbol.search",
    "[Symbol.search]",
    "Symbol.species",
    "[Symbol.species]",
    "Symbol.split",
    "[Symbol.split]",
    "Symbol.toPrimitive",
    "[Symbol.toPrimitive]",
    "Symbol.toStringTag",
    "[Symbol.toStringTag]",
    "Symbol.unscopables",
    "[Symbol.unscopables]",
    // Well known builtins
    "Array",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "AsyncFunction",
    "AsyncGenerator",
    "AsyncGeneratorFunction",
    "Atomics",
    "BigInt",
    "Boolean",
    "DataView",
    "Date",
    "Error",
    "AggregateError",
    "EvalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError",
    "escape",
    "unescape",
    "eval",
    "Function",
    "Generator",
    "GeneratorFunction",
    "Intl",
    "Collator",
    "ListFormat",
    "Locale",
    "PluralRules",
    "Segmenter",
    "DateTimeFormat",
    "JSON",
    "Map",
    "Math",
    "Number",
    "isFinite",
    "isNaN",
    "parseInt",
    "parseFloat",
    "Object",
    "Promise",
    "Proxy",
    "Reflect",
    "RegExp",
    "Set",
    "String",
    "Symbol",
    "TypedArray",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Uint16Array",
    "Int32Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    "Float32Array",
    "Float64Array",
    "encodeURI",
    "encodeURIComponent",
    "decodeURI",
    "decodeURIComponent",
    "WeakRef",
    "WeakMap",
    "WeakSet",
    "Temporal",
    "Temporal.Now",
    "Temporal.Instant",
    "Temporal.Duration",
    "Temporal.Calendar",
    "Temporal.PlainDate",
    "Temporal.PlainDateTime",
    "Temporal.PlainMonthDay",
    "Temporal.PlainYearMonth",
    "Temporal.PlainTime",
    "Temporal.TimeZone",
    "Temporal.ZonedDateTime",
    // Misc
    ",",
    ":",
    // Generic use
    "name",
    "length",
    "arguments",
    "prototype",
    "constructor",
    "return",
    "throw",
    "global",
    "globalThis",
    // typeof
    "null",
    "undefined",
    "number",
    "string",
    "symbol",
    "bigint",
    "object",
    "function",
    // Property descriptor
    "value",
    "get",
    "set",
    "writable",
    "enumerable",
    "configurable",
    // Object object
    "Object",
    "assign",
    "create",
    "toString",
    "valueOf",
    "is",
    "seal",
    "isSealed",
    "freeze",
    "isFrozen",
    "isExtensible",
    "hasOwnProperty",
    "isPrototypeOf",
    "setPrototypeOf",
    "getPrototypeOf",
    "defineProperty",
    "defineProperties",
    "deleteProperty",
    "construct",
    "hasOwn",
    "ownKeys",
    "keys",
    "values",
    "entries",
    "fromEntries",
    // Function object
    "apply",
    "bind",
    "call",
    // Array object
    "at",
    "from",
    "isArray",
    "of",
    "copyWithin",
    "every",
    "fill",
    "filter",
    "find",
    "findIndex",
    "findLast",
    "findLastIndex",
    "flat",
    "flatMap",
    "forEach",
    "includes",
    "indexOf",
    "join",
    "map",
    "next",
    "reduce",
    "reduceRight",
    "reverse",
    "shift",
    "slice",
    "splice",
    "some",
    "sort",
    "unshift",
    "push",
    "pop",
    // String object
    "charAt",
    "charCodeAt",
    "codePointAt",
    "concat",
    "endsWith",
    "fromCharCode",
    "fromCodePoint",
    "lastIndexOf",
    "match",
    "matchAll",
    "normalize",
    "padEnd",
    "padStart",
    "raw",
    "repeat",
    "replace",
    "replaceAll",
    "search",
    "split",
    "startsWith",
    "substr",
    "substring",
    "toLocaleString",
    "toLowerCase",
    "toUpperCase",
    "trim",
    "trimEnd",
    "trimStart",
    // Number object
    "Infinity",
    "NaN",
    "EPSILON",
    "MAX_SAFE_INTEGER",
    "MIN_SAFE_INTEGER",
    "MAX_VALUE",
    "MIN_VALUE",
    "isSafeInteger",
    "isInteger",
    "toExponential",
    "toFixed",
    "toPrecision",
    // BigInt object
    "asIntN",
    "asUintN",
    // RegExp object
    "exec",
    "test",
    "flags",
    "index",
    "lastIndex",
    "hasIndices",
    "ignoreCase",
    "multiline",
    "dotAll",
    "unicode",
    "sticky",
    "source",
    "get hasIndices",
    "get global",
    "get ignoreCase",
    "get multiline",
    "get dotAll",
    "get unicode",
    "get sticky",
    "get flags",
    "get source",
    // Symbol object
    "for",
    "keyFor",
    "description",
    "asyncIterator",
    "hasInstance",
    "species",
    "unscopables",
    "iterator",
    "toStringTag",
    "toPrimitive",
    "get description",
    // Map object
    "clear",
    "delete",
    "has",
    "size",
    // Set object
    "add",
    // Reflect object
    // Proxy object
    "revocable",
    // Error objects
    "message",
    // Date object
    "toJSON",
    "getDate",
    "getDay",
    "getFullYear",
    "getHours",
    "getMilliseconds",
    "getMinutes",
    "getMonth",
    "getSeconds",
    "getTime",
    "getYear",
    "getUTCDate",
    "getUTCDay",
    "getUTCFullYear",
    "getUTCHours",
    "getUTCMinutes",
    "getUTCMonth",
    "getUTCSeconds",
    "setDate",
    "setFullYear",
    "setHours",
    "setMilliseconds",
    "setMinutes",
    "setMonth",
    "setSeconds",
    "setYear",
    "setTime",
    "setUTCDate",
    "setUTCFullYear",
    "setUTCHours",
    "setUTCMinutes",
    "setUTCMonth",
    "setUTCSeconds",
    "toDateString",
    "toGMTString",
    "toISOString",
    "toTimeString",
    "toUTCString",
    "now",
    "UTC",
    // JSON object
    "parse",
    "stringify",
    // Iterator object
    "Array Iterator",
    "Set Iterator",
    "String Iterator",
    "Map Iterator",
    "For In Iterator",
    // Math object
    "LN10",
    "LN2",
    "LOG10E",
    "LOG2E",
    "PI",
    "SQRT1_2",
    "SQRT2",
    "abs",
    "acos",
    "acosh",
    "asin",
    "asinh",
    "atan",
    "atanh",
    "atan2",
    "cbrt",
    "ceil",
    "clz32",
    "cos",
    "cosh",
    "exp",
    "expm1",
    "floor",
    "fround",
    "hypot",
    "imul",
    "log",
    "log1p",
    "log10",
    "log2",
    "max",
    "min",
    "pow",
    "random",
    "round",
    "sign",
    "sin",
    "sinh",
    "sqrt",
    "tan",
    "tanh",
    "trunc",
    // TypedArray object
    "buffer",
    "byteLength",
    "byteOffset",
    "isView",
    "subarray",
    "get byteLength",
    "get buffer",
    "get byteOffset",
    "get size",
    "get length",
    // DataView object
    "getBigInt64",
    "getBigUint64",
    "getFloat32",
    "getFloat64",
    "getInt8",
    "getInt16",
    "getInt32",
    "getUint8",
    "getUint16",
    "getUint32",
    "setBigInt64",
    "setBigUint64",
    "setFloat32",
    "setFloat64",
    "setInt8",
    "setInt16",
    "setInt32",
    "setUint8",
    "setUint16",
    "setUint32",
    // Console object
    "console",
    "assert",
    "debug",
    "error",
    "info",
    "trace",
    "warn",
    "exception",
    "count",
    "countReset",
    "group",
    "groupCollapsed",
    "groupEnd",
    "time",
    "timeLog",
    "timeEnd",
    "dir",
    "dirxml",
    // Minified name
    "a",
    "",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "A",
    "",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "_",
    "$",
];
